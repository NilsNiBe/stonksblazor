@using MudBlazor;
@using StonksBlazor.Models

<MudTable Items="@UiShares" Style="margin-top: 20px" RowStyle="background-color: #cfe8fc">
  <HeaderContent>
    <MudTh></MudTh>
    <MudTh>Aktie</MudTh>
    <MudTh>Menge</MudTh>
    <MudTh>Gesamtwert</MudTh>
    <MudTh>(gesamt) G/V</MudTh>
    <MudTh>Aktienwert</MudTh>
    <MudTh>(aktuell) G/V</MudTh>
  </HeaderContent>
  <RowTemplate>
    <MudTd>
      <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowDown"
                     @onclick="@(() => OnExpandClicked(context.Share.Symbol))" />
    </MudTd>
    <MudTd>@context.Share.Symbol</MudTd>
    <MudTd>@context.Share.Purchases.Sum(x => x.Amount)</MudTd>
    <MudTd></MudTd>
    <MudTd></MudTd>
    <MudTd></MudTd>
    <MudTd></MudTd>
  </RowTemplate>
  <ChildRowContent>
    @if (context.ShowPurchase)
    {
      <MudTr>
        <td colspan="7">
          <SharesTableRow Purchases="context.Share.Purchases" />
        </td>
      </MudTr>
    }
  </ChildRowContent>
</MudTable>

@code {
  [Parameter]
  public List<Share>? Shares { get; set; }

  private record UiShare(Share Share, bool ShowPurchase);

  private List<UiShare> UiShares = new List<UiShare>();

  protected override void OnParametersSet()
  {
    var newUiShare = Shares?.GroupJoin<Share, UiShare, string, UiShare>(
      UiShares, share => share.Symbol, uiShare => uiShare.Share.Symbol,
      (x, y) => new UiShare(x, y.Any() ? y.First().ShowPurchase : false)).ToList();
    UiShares = newUiShare ?? new List<UiShare>();
    base.OnParametersSet();
  }

  private void OnExpandClicked(string symbol)
  {
    var share = UiShares.First(x => x.Share.Symbol == symbol);
    var index = UiShares.IndexOf(share);
    UiShares[index] = share with { ShowPurchase = !share.ShowPurchase };
  }
}
